AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  This template creates API Gateway and Lambda resources for the backend service.
Parameters:
  S3BucketName:
    Type: String
    Description: GENERATED
  Stage:
    Type: String
    Description: The stage where the application is running
Resources:
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Username
          AttributeType: S
      KeySchema:
        - AttributeName: Username
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      OpenApiVersion: '3.0.0'
      Variables:
        DynamoDBTable: !Ref UserTable
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Sub s3://${S3BucketName}/app/swagger.yaml


  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
          Condition: {}
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess


  UserCreatePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserCreateFunction.Arn
      Principal: apigateway.amazonaws.com

  UserDeletePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserDeleteFunction.Arn
      Principal: apigateway.amazonaws.com
      #SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}

  UserCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.handler
      Policies:
      - Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource: !GetAtt UserTable.Arn
      InlineCode: |
        import json
        import boto3
        
        try:
          dynamodb = boto3.resource('dynamodb')
        except Exception as e:
          _raise(Exception, "Message:" + str(e))
      
        value = lambda dictionary, key: dictionary[key] if key in dictionary else ""
        
        def _raise(exception, error):
          raise exception(error)
        
        def create_user(payload, stagevars, context):
            table = dynamodb.Table(stagevars['DynamoDBTable'])

            record = {
              "SourceIP": value(context, "source-ip"),
              "UserAgent": value(context, "user-agent")
            }
            record.update(payload)
            table.put_item(Item=record)
            return record
        
        def handler(event,_):
            try:
                record = create_user(event['body-json'],
                                     event['stage-variables'],
                                     event['context'])
        
                response = {
                  'statusCode': 200,
                  'body': json.dumps(record)
                }
                return response

            except Exception as e:
                _raise(Exception, 'Message:' + str(e))
 
  UserDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.handler
      InlineCode: |
        def handler(event, context):
          response = {
            'statusCode': 200,
            'body': 'Hello, Lambda Delete!'
          }
          return response

Outputs:
  Url:
    Description: Endpoint URL
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'

# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md
openapi: 3.0.2
info:
  title: Sample API Swaggertest
  description: Yet Another Example
  version: "2019-10-13"

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: all

paths:
  /users/{name}:
    get:
      summary: Return user by Name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            $ref: '#/components/responses/Username'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCreateFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        "200":
          $ref: '#/components/responses/ListUser'
    delete:
      summary: Delete user by Name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            $ref: '#/components/responses/Username'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserDeleteFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        "200":
          $ref: '#/components/responses/ListUser'
    post:
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCreateFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
      responses:
        "200":
          $ref: '#/components/responses/ListUser'
components:
  requestBodies:
    CreateUser:
      description: Create or Update a User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  responses:
    ListUser:
      description: "Successful"
      statusCode: "200"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  schemas:
    Name:
      type: string
    Id:
      type: integer
    Email:
      type: string
      format: email
    User:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/Name'
        Email:
          $ref: '#/componments/schemas/Email'
      required:
        - Name
        - Email
    UserId:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Id'



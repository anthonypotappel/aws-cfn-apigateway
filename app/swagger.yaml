# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md
openapi: 3.0.0
info:
  title: Sample API Swaggertest
  description: Yet Another Example
  version: "2019-10-13"

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: all


paths:
  /posts:
    post:
      requestBody:
        $ref: '#/components/requestBodies/Post'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCreateFunction.Arn}/invocations"
        passthroughBehavior: NEVER
        httpMethod: POST
        type: aws
        responses:
          default:
            statusCode: 200
        requestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
              "body-json" : $input.json('$'),
              "params" : {
              "$type" : {
                  "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
              }
              },
              "stage-variables" : {
                #foreach($key in $stageVariables.keySet())
                "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
              #end
              },
              "context" : {
                  "account-id" : "$context.identity.accountId",
                  "api-id" : "$context.apiId",
                  "api-key" : "$context.identity.apiKey",
                  "authorizer-principal-id" : "$context.authorizer.principalId",
                  "caller" : "$context.identity.caller",
                  "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                  "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                  "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                  "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                  "http-method" : "$context.httpMethod",
                  "stage" : "$context.stage",
                  "source-ip" : "$context.identity.sourceIp",
                  "user" : "$context.identity.user",
                  "user-agent" : "$context.identity.userAgent",
                  "user-arn" : "$context.identity.userArn",
                  "request-id" : "$context.requestId",
                  "resource-id" : "$context.resourceId",
                  "resource-path" : "$context.resourcePath"
                  }
            }
      responses:
        "200":
          statusCode: 200
          #$ref: '#/components/responses/ListUser'
    get:
      summary: Return user by Name
      #parameters:
      #  - in: path
      #    name: name
      #    required: true
      #    schema:
      #      $ref: '#/components/schemas/Name'
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: APIGatewayRole.Arn
        passthroughBehavior: WHEN_NO_MATCH
        httpMethod: POST
        type: aws
        #https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html
        #https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html#DDB-Query-request-Limit
        #uri: 
        #  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
        #uri: 
        #  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/BatchGetItem"
        uri: 
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        requestTemplates:
          application/json:
            #Fn::Sub: |
            #  {
            #    "TableName": "${UserTable}",
            #    "ScanFilter": {
            #      "UserId": {
            #        "AttributeValueList":[{"S":"$input.params('UserId')"}],
            #         "ComparisonOperator": "BEGINS_WITH"
            #      }
            #    }
            #  }
            #Fn::Sub: |
            #  {
            #    "RequestItems": {
            #      "${UserTable}": {
            #        "Keys": [
            #          {
            #            "UserId": {"S":"$input.params('UserId')"},
            #            "EventTime": {"N": "1576356163162"}
            #          }
            #        ]
            #      }
            #    }
            #  }
            # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html#GSI.Querying
            Fn::Sub: |
              {
                "TableName": "${DynamoDbTableName}",
                "IndexName": "Tag0",
                "KeyConditionExpression": "Tag0 = :v_tag",
                "ExpressionAttributeValues": {
                  ":v_tag": {"S":"$input.params('Tag')"}
                },
                "ProjectionExpression": "UserId, Message"
              }
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: |
                [
                #foreach($item in $input.path('$.Items'))
                {
                    "UserId": "$item.UserId.S",
                    "EventTime": "$item.EventTime.N",
                    "Message": "$item.Message.S"
                }
                #if($foreach.hasNext), #end
                #end
                ]
      responses:
        "200":
          statusCode: 200
          #$ref: '#/components/responses/ListUser'
  #/posts/{name}:
  #  delete:
  #    summary: Delete user by Name
  #    parameters:
  #      - in: path
  #        name: name
  #        required: true
  #        schema:
  #          $ref: '#/components/schemas/Name'
  #    x-amazon-apigateway-integration:
  #      uri:
  #        Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserDeleteFunction.Arn}/invocations"
  #      passthroughBehavior: WHEN_NO_MATCH
  #      httpMethod: POST
  #      type: aws_proxy
  #    responses:
  #      "200":
  #        $ref: '#/components/responses/ListUser'

components:
  requestBodies:
    Post:
      description: Create a new Post
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
  responses:
    ListPosts:
      description: "Successful"
      #statusCode: "200"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
  schemas:
    UserId:
      type: string
    Message:
      type: string
      #format: email
    Tags:
      type: array
      items:
        type: string
    Post:
      type: object
      properties:
        UserId:
          $ref: '#/components/schemas/UserId'
        Message:
          $ref: '#/components/schemas/Message'
        Tags:
          $ref: '#/components/schemas/Tags'
      required:
        - UserId
        - Message

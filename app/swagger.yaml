# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md
openapi: 3.0.0
info:
  title: Sample API Swaggertest
  description: Yet Another Example
  version: "2019-10-13"

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: all


paths:
  /users:
    post:
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCreateFunction.Arn}/invocations"
        passthroughBehavior: NEVER
        httpMethod: POST
        type: aws
        responses:
          default:
            statusCode: 200
        requestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
              "body-json" : $input.json('$'),
              "params" : {
              "$type" : {
                  "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
              }
              },
              "stage-variables" : {
                #foreach($key in $stageVariables.keySet())
                "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
              #end
              },
              "context" : {
                  "account-id" : "$context.identity.accountId",
                  "api-id" : "$context.apiId",
                  "api-key" : "$context.identity.apiKey",
                  "authorizer-principal-id" : "$context.authorizer.principalId",
                  "caller" : "$context.identity.caller",
                  "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                  "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                  "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                  "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                  "http-method" : "$context.httpMethod",
                  "stage" : "$context.stage",
                  "source-ip" : "$context.identity.sourceIp",
                  "user" : "$context.identity.user",
                  "user-agent" : "$context.identity.userAgent",
                  "user-arn" : "$context.identity.userArn",
                  "request-id" : "$context.requestId",
                  "resource-id" : "$context.resourceId",
                  "resource-path" : "$context.resourcePath"
                  }
            }
      responses:
        "200":
          $ref: '#/components/responses/ListUser'
  /users/{name}:
    get:
      summary: Return user by Name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            $ref: '#/components/schemas/Name'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCreateFunction.Arn}/invocations"
        passthroughBehavior: WHEN_NO_MATCH
        httpMethod: POST
        type: aws_proxy
      responses:
        "200":
          $ref: '#/components/responses/ListUser'
    delete:
      summary: Delete user by Name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            $ref: '#/components/schemas/Name'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserDeleteFunction.Arn}/invocations"
        passthroughBehavior: WHEN_NO_MATCH
        httpMethod: POST
        type: aws_proxy
      responses:
        "200":
          $ref: '#/components/responses/ListUser'

components:
  requestBodies:
    CreateUser:
      description: Create or Update a User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  responses:
    ListUser:
      description: "Successful"
      #statusCode: "200"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Name'
  schemas:
    Name:
      type: string
    Id:
      type: integer
    Email:
      type: string
      format: email
    User:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/Name'
        Email:
          $ref: '#/components/schemas/Email'
      required:
        - Name
        - Email
    UserId:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Id'



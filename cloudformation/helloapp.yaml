AWSTemplateFormatVersion: 2010-09-09
Description: Api Gateway and Lambda functions
Resources:
  HelloLambdaGET:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloLambdaGet
      Description: Say we like Lambdas
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt  LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            response = {
              'statusCode': 200,
              'body': 'Hello, Lambda GET!'
            }
            return response
  HelloLambdaPOST:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloLambdaPost
      Description: Say we like Lambdas
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt  LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
            response = {
              'statusCode': 200,
              'body': 'Hello, Lambda POST!'
            }
            return response
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  HelloApp:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Hello Lambda
      Description: Tell the world we like Lambdas
  HelloAppDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - HelloLambdaMethodGET
      - HelloLambdaMethodPOST
    Properties:
      RestApiId: !Ref HelloApp
      StageName: PROD
  HelloAppLatest:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref HelloAppDeployment
      Description: HelloApp LATEST
      RestApiId: !Ref HelloApp
      StageName: LATEST
  HelloPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HelloApp
      ParentId: !GetAtt HelloApp.RootResourceId
      PathPart: hello
  HelloLambdaMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloLambdaGET.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
        RequestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
              "body-json" : $input.json('$'),
              "params" : {
              "$type" : {
                  "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
              }
              },
              "stage-variables" : {
              "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
              },
              "context" : {
                  "account-id" : "$context.identity.accountId",
                  "api-id" : "$context.apiId",
                  "api-key" : "$context.identity.apiKey",
                  "authorizer-principal-id" : "$context.authorizer.principalId",
                  "caller" : "$context.identity.caller",
                  "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                  "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                  "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                  "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                  "http-method" : "$context.httpMethod",
                  "stage" : "$context.stage",
                  "source-ip" : "$context.identity.sourceIp",
                  "user" : "$context.identity.user",
                  "user-agent" : "$context.identity.userAgent",
                  "user-arn" : "$context.identity.userArn",
                  "request-id" : "$context.requestId",
                  "resource-id" : "$context.resourceId",
                  "resource-path" : "$context.resourcePath"
                  }
            }
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref HelloPath
      RestApiId: !Ref HelloApp
      MethodResponses:
        - StatusCode: 200
  HelloLambdaMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloLambdaPOST.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
        RequestTemplates:
          application/json: |
            ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
            #set($allParams = $input.params())
            {
              "body-json" : $input.json('$'),
              "params" : {
              "$type" : {
                  "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
              }
              },
              "stage-variables" : {
              "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
              },
              "context" : {
                  "account-id" : "$context.identity.accountId",
                  "api-id" : "$context.apiId",
                  "api-key" : "$context.identity.apiKey",
                  "authorizer-principal-id" : "$context.authorizer.principalId",
                  "caller" : "$context.identity.caller",
                  "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                  "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                  "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                  "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                  "http-method" : "$context.httpMethod",
                  "stage" : "$context.stage",
                  "source-ip" : "$context.identity.sourceIp",
                  "user" : "$context.identity.user",
                  "user-agent" : "$context.identity.userAgent",
                  "user-arn" : "$context.identity.userArn",
                  "request-id" : "$context.requestId",
                  "resource-id" : "$context.resourceId",
                  "resource-path" : "$context.resourcePath"
                  }
            }
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref HelloPath
      RestApiId: !Ref HelloApp
      MethodResponses:
        - StatusCode: 200
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                - !GetAtt HelloLambdaGET.Arn
                - !GetAtt HelloLambdaPOST.Arn
Outputs:
  Url:
    Description: Endpoint URL
    Value: !Sub 'https://${HelloApp}.execute-api.${AWS::Region}.amazonaws.com/LATEST/hello'
